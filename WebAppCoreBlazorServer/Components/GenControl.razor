@using WebCore.Entities
@using Newtonsoft.Json
@using WebModelCore
@using WebModelCore.CodeInfo
@using WebModelCore.Common
@using WebAppCoreBlazorServer.Service
@using Microsoft.Extensions.Configuration
@using WebAppCoreBlazorServer.BUS
@using Microsoft.Extensions.Caching.Distributed
@inject NavigationManager NavigationManager
@inject IConfiguration iConfiguration
@inject IDistributedCache distributedCache
@inject IModuleService moduleService
@inject IJSRuntime JSRuntime
@using WebAppCoreBlazorServer.Common
@{
    if (string.IsNullOrEmpty(field.Value) && !string.IsNullOrEmpty(field.DefaultValue))
    {
        field.Value = field.DefaultValue;
    }
    if (field.ControlType == EControlType.TB.ToString())
    {
        if (!string.IsNullOrEmpty(field.Callback))
        {
            <input type='text' class="form-control" @onchange="ControlOnchange" id='@field.FieldName' value='@field.Value' placeholder="@field.FieldName.GetLanguage(languageInfos,modName)" />
            @*<InputText @bind-Value="@field.Value" @onchange="ControlOnchange" id='@field.FieldName' class="form-control" placeholder="@field.FieldName.GetLanguage(languageInfos,modName)"></InputText>*@
            <ValidationMessage For="@(() => field.Value)" />
        }
        else
        {
            @*<input type='text' class="form-control" @bind="field.Value" id='@field.FieldName' placeholder="@field.FieldName.GetLanguage(languageInfos,modName)" />*@
            <InputText @bind-Value="@field.Value" class="form-control" id='@field.FieldName' placeholder="@field.FieldName.GetLanguage(languageInfos,modName)"></InputText>
            <ValidationMessage For="@(() => field.Value)" />
        }
    }
    else if (field.ControlType == EControlType.CB.ToString())
    {
        if (!string.IsNullOrEmpty(field.Callback))
        {
            <select id="@field.FieldName" @onchange="ControlOnchange" class="form-control">
                @{
                    <option value=''>-- Chọn --</option>
                    if (dataComboBoxs != null)
                    {
                        var options = dataComboBoxs.Where(x => x.Name.ToUpper() == field.FieldName.ToUpper());
                        if (options != null && options.Any())
                        {
                            foreach (var item in options.First().CodeInfos)
                            {
                                if (field.Value != null)
                                {
                                    if (field.Value.ToUpper() == "True".ToUpper())
                                    {
                                        field.Value = "Y";
                                    }
                                    else if (field.Value.ToUpper() == "FALSE")
                                    {
                                        field.Value = "N";
                                    }
                                    if (item.CodeValue == field.Value || item.CodeValue == field.DefaultValue)
                                    {
                                        <option selected='selected' value='@item.CodeValue'>@item.CodeValueName</option>
                                    }
                                    else
                                    {
                                        <option value='@item.CodeValue'>@item.CodeValueName</option>
                                    }
                                }
                            }
                        }
                    }
                }
            </select>
        }
        else
        {
            <select id="@field.FieldName" @bind="field.Value" class="form-control">
                @{
                    <option value=''>-- Chọn --</option>
                    if (dataComboBoxs != null)
                    {
                        var options = dataComboBoxs.Where(x => x.Name.ToUpper() == field.FieldName.ToUpper());
                        if (options != null && options.Any())
                        {
                            foreach (var item in options.First().CodeInfos)
                            {
                                if (field.Value != null)
                                {
                                    if (field.Value.ToUpper() == "True".ToUpper())
                                    {
                                        field.Value = "Y";
                                    }
                                    else if (field.Value.ToUpper() == "FALSE")
                                    {
                                        field.Value = "N";
                                    }
                                    if (item.CodeValue == field.Value || item.CodeValue == field.DefaultValue)
                                    {
                                        <option selected='selected' value='@item.CodeValue'>@item.CodeValueName</option>
                                    }
                                    else
                                    {
                                        <option value='@item.CodeValue'>@item.CodeValueName</option>
                                    }
                                }
                                else
                                {
                                    <option value='@item.CodeValue'>@item.CodeValueName</option>
                                }
                            }
                        }
                    }
                }
            </select>
        }

    }
    else if (field.ControlType == EControlType.DT.ToString())
    {
        @*<div class="input-group">
                <InputText class="form-control datepicker" id='@field.FieldName' @onchange="ControlOnchange" @bind-Value='@field.Value' data-date-format="mm/dd/yyyy"></InputText>
                <label class="input-group-text"><i class="ik ik-calendar"></i></label>
                <ValidationMessage For="@(() => field.Value)" />
            </div>*@

        <div class="input-group">
            <InputDate class="form-control" id='@field.FieldName' @bind-Value='@field.ValueDate' data-date-format="@(String.IsNullOrEmpty(field.FieldFormat)?"dd/MM/yyyy":field.FieldFormat)"></InputDate>
            <label class="input-group-text"><i class="ik ik-calendar"></i></label>
            <ValidationMessage For="@(() => field.ValueDate)" />
        </div>
    }
    else if (field.ControlType == EControlType.TAB.ToString())
    {
        <TabControl>
            @{
                if (field.FieldChilds != null)
                {
                    bool firstTab = true;
                    foreach (var item in field.FieldChilds)
                    {
                        @*<TabPage Text="@item.FieldName.GetLanguage(languageInfos,modName)">
                                <WebAppCoreBlazorServer.Pages.Edit modId="@item.ModuleID" modSearchId="03901" />
                            </TabPage>*@
                        <TabPage Text="@item.FieldName.GetLanguage(languageInfos,modName)">
                            <div>
                                <WebAppCoreBlazorServer.Pages.Edit modId="@item.CallModId" modSearchId="" />
                            </div>
                        </TabPage>
                    }
                }
            }
        </TabControl>

    }
    else if (field.ControlType == EControlType.SCL.ToString())
    {
        @*<ScheduleControl></ScheduleControl>*@
    }
    else if (field.ControlType == EControlType.GE.ToString())
    {
        <GridEditComponent DataComboBoxs="@dataComboBoxs" ModuleInfo="@ModuleInfo" Field="@field" Fields="@fields" LanguageInfos="languageInfos" ModName="@modName"></GridEditComponent>
    }
    //dongpv:upload image
    else if (field.ControlType == EControlType.UF.ToString())
    {
        <UploadFiles ModuleInfo="@ModuleInfo"  Field="@field"></UploadFiles>
    }
    //dongpv:lookup data
    else if (field.ControlType == EControlType.LV.ToString())
    {
        <LookupData ModuleInfo="@ModuleInfo"  Field="@field" FieldName="@($"MODID={field.ModuleID}@FLDNAME={field.FieldName}")"  ></LookupData>
    }
    
}
