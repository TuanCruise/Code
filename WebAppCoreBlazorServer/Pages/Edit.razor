@page "/Edit/{modId}/{modSearchId}"
@page "/Edit/{modId}/{modSearchId}/{fieldNameEdit}/{parram}/{pedit}"
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json
@using WebModelCore;
@using WebModelCore.CodeInfo
@using WebModelCore.Common
@using WebAppCoreBlazorServer.Common
@using WebAppCoreBlazorServer.Service
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.Extensions.Configuration
@using WebAppCoreBlazorServer.BUS
@using WebCore.Entities;
@using Microsoft.Extensions.Caching.Distributed
@inject NavigationManager NavigationManager
@inject IConfiguration iConfiguration

@inject IDistributedCache distributedCache
@inject IModuleService moduleService

<EditForm EditContext="@editContext" OnValidSubmit="@Save">
    <Blazored.FluentValidation.FluentValidationValidator DisableAssemblyScanning="@true" />
    <ValidationSummary />
    @{ 
        if (ErrorValidate !=null && ErrorValidate.Any())
        {
            <div class="text-danger">
                @{ 
                    foreach (var item in ErrorValidate)
                    {
                        <div class="col-6">
                            <span class="text-danger">@item</span>
                        </div>
                    }
                }
            </div>
        }
    }
    @{
        var lstFieldAdded = new List<string>();
        var lstFieldNotAdd = new List<ModuleFieldInfo>();
        if (moduleFieldInfo == null)
        {
            moduleFieldInfo = new List<ModuleFieldInfo>();
        }
        lstFieldNotAdd = moduleFieldInfo.ToList();
        while (lstFieldNotAdd.Count != 0)
        {
            var field1 = lstFieldNotAdd[0];
            ModuleFieldInfo field2 = null;
            if (lstFieldNotAdd.Count() > 1)
            {
                field2 = lstFieldNotAdd[1];
            }

            var checkField1 = lstFieldAdded.Where(x => x == field1.Value);
            if (!string.IsNullOrEmpty(field1.FieldsGroup))
            {
                var fieldGroups = lstFieldNotAdd.Where(x => x.FieldsGroup == field1.FieldsGroup);
                var textGroupField = fieldGroups.First().GetGroupFieldTextBtn(moduleInfoModel.LanguageInfo);
                if (string.IsNullOrEmpty(textGroupField))
                {
                    <div class="row">
                        @{
                            var countFieldGroups = fieldGroups.Count();
                            foreach (var fieldGroup in fieldGroups.ToList())
                            {
                                <div class="col-sm-@(12 / countFieldGroups) form-group">
                                    <label class="control-label">
                                        @fieldGroup.GetLanguage(moduleInfoModel.LanguageInfo, moduleInfoModel.ModulesInfo.ModuleName)
                                        @if (fieldGroup.Nullable == EYesNo.N.ToString())
                                        {
                                            <span class="text-danger">*</span>
                                        }
                                    </label>
                                    <WebAppCoreBlazorServer.Components.GenControl field="@fieldGroup" dataComboBoxs="@codeInfos" dataEdit="dataControl" keyEdit="@keyEdit" modName="@moduleInfoModel.ModulesInfo.ModuleName" languageInfos="@moduleInfoModel.LanguageInfo" />
                                    @*@((MarkupString)(fieldGroup.GetHtmlControl(codeInfos, moduleInfoModel.LanguageInfo, "", dataControl, moduleInfoModel.ModulesInfo.ModuleName, keyEdit)))*@
                                </div>
                                lstFieldNotAdd.Remove(fieldGroup);
                            }
                        }
                    </div>
                }
                else
                {
                    <div class="panel-group" id="accordion@(moduleInfo.ModuleName + " -" + fieldGroups.First().FieldsGroup)" role="tablist" aria-multiselectable="true">
                        <div class="card">
                            <div class="panel-heading" role="tab" id="headingOne">
                                <h4 class="card-header">
                                    <span class="left">@textGroupField</span>

                                    <a role="button" data-toggle="collapse" class="right" data-parent="#accordion@(moduleInfo.ModuleName + " -" + fieldGroups.First().FieldsGroup)" href="#@(moduleInfo.ModuleName + " -" + fieldGroups.First().FieldsGroup)" aria-expanded="true" aria-controls="collapseOne">
                                        <i class="more-less ik ik-plus-circle"></i>
                                    </a>
                                </h4>
                            </div>
                            <div id="@(moduleInfo.ModuleName + " -" + fieldGroups.First().FieldsGroup)" class="panel-collapse" role="tabpanel" aria-labelledby="headingOne">
                                <div class="card-body">
                                    <div class="row">
                                        @{
                                            var countFieldGroups = fieldGroups.Count();
                                            foreach (var fieldGroup in fieldGroups.ToList())
                                            {
                                                <div class="col-sm-@(12 / countFieldGroups) form-group">
                                                    <label class="control-label">
                                                        @fieldGroup.GetLanguage(moduleInfoModel.LanguageInfo, moduleInfoModel.ModulesInfo.ModuleName)
                                                        @if (fieldGroup.Nullable == EYesNo.N.ToString())
                                                        {
                                                            <span class="text-danger">*</span>
                                                        }
                                                    </label>
                                                    <WebAppCoreBlazorServer.Components.GenControl field="@fieldGroup" dataComboBoxs="@codeInfos" dataEdit="dataControl" keyEdit="@keyEdit" modName="@moduleInfoModel.ModulesInfo.ModuleName" languageInfos="@moduleInfoModel.LanguageInfo" />
                                                    @*@((MarkupString)(fieldGroup.GetHtmlControl(codeInfos, moduleInfoModel.LanguageInfo, "", dataControl, moduleInfoModel.ModulesInfo.ModuleName, keyEdit)))*@
                                                </div>
                                                lstFieldNotAdd.Remove(fieldGroup);
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                }
                continue;
            }
            else
            {
                if (field2 != null && !string.IsNullOrEmpty(field2.FieldsGroup))
                {
                    <div class="row col-sm-12">
                        <div class="form-group col-sm-6">
                            <label class="control-label">
                                @field1.GetLanguage(moduleInfoModel.LanguageInfo, moduleInfoModel.ModulesInfo.ModuleName)
                                @if (field1.Nullable == EYesNo.N.ToString())
                                {
                                    <span class="text-danger">*</span>
                                }
                            </label>
                            @*@((MarkupString)(field1.GetHtmlControl(codeInfos, moduleInfoModel.LanguageInfo, "", dataControl, moduleInfoModel.ModulesInfo.ModuleName, keyEdit)))*@
                            <WebAppCoreBlazorServer.Components.GenControl field="@field1" dataComboBoxs="@codeInfos" dataEdit="dataControl" keyEdit="@keyEdit" modName="@moduleInfoModel.ModulesInfo.ModuleName" languageInfos="@moduleInfoModel.LanguageInfo" />
                        </div>
                        <div class="form-group col-sm-6">
                            <label class="control-label">
                                @field2.GetLanguage(moduleInfoModel.LanguageInfo, moduleInfoModel.ModulesInfo.ModuleName)
                                @if (field2.Nullable == EYesNo.N.ToString())
                                {
                                    <span class="text-danger">*</span>
                                }
                            </label>
                            <WebAppCoreBlazorServer.Components.GenControl field="@field2" dataComboBoxs="@codeInfos" dataEdit="dataControl" keyEdit="@keyEdit" modName="@moduleInfoModel.ModulesInfo.ModuleName" languageInfos="@moduleInfoModel.LanguageInfo" />
                            @*@((MarkupString)(field1.GetHtmlControl(codeInfos, moduleInfoModel.LanguageInfo, "", dataControl, moduleInfoModel.ModulesInfo.ModuleName, keyEdit)))*@
                        </div>
                    </div>
                    lstFieldNotAdd.Remove(field1);
                    var fieldGroups = lstFieldNotAdd.Where(x => x.FieldsGroup == field2.FieldsGroup);
                    <div class="row  col-sm-12">
                        @{
                            var countFieldGroups = fieldGroups.Count();
                            foreach (var fieldGroup in fieldGroups.ToList())
                            {
                                <div class="col-sm-@(12 / countFieldGroups) form-group">
                                    <label class="control-label">
                                        @fieldGroup.GetLanguage(moduleInfoModel.LanguageInfo, moduleInfoModel.ModulesInfo.ModuleName)
                                        @if (fieldGroup.Nullable == EYesNo.N.ToString())
                                        {
                                            <span class="text-danger">*</span>
                                        }
                                    </label>
                                    <WebAppCoreBlazorServer.Components.GenControl field="@fieldGroup" dataComboBoxs="@codeInfos" dataEdit="dataControl" keyEdit="@keyEdit" modName="@moduleInfoModel.ModulesInfo.ModuleName" languageInfos="@moduleInfoModel.LanguageInfo" />
                                    @*@((MarkupString)(fieldGroup.GetHtmlControl(codeInfos, moduleInfoModel.LanguageInfo, "", dataControl, moduleInfoModel.ModulesInfo.ModuleName, keyEdit)))*@
                                </div>
                                lstFieldNotAdd.Remove(fieldGroup);
                            }
                        }
                    </div>
                }
                else if (field2 == null)
                {
                    <div class="row  col-sm-12">
                        <div class="form-group col-sm-6">
                            <label class="control-label">
                                @field1.GetLanguage(moduleInfoModel.LanguageInfo, moduleInfoModel.ModulesInfo.ModuleName)
                                @if (field1.Nullable == EYesNo.N.ToString())
                                {
                                    <span class="text-danger">*</span>
                                }
                            </label>
                            <WebAppCoreBlazorServer.Components.GenControl field="@field1" dataComboBoxs="@codeInfos" dataEdit="@dataControl" keyEdit="@keyEdit" modName="@moduleInfoModel.ModulesInfo.ModuleName" languageInfos="@moduleInfoModel.LanguageInfo" />
                            @*@((MarkupString)(field1.GetHtmlControl(codeInfos, moduleInfoModel.LanguageInfo, "", dataControl, moduleInfoModel.ModulesInfo.ModuleName, keyEdit)))*@
                        </div>
                    </div>
                    lstFieldNotAdd.Remove(field1);
                }
                else if (string.IsNullOrEmpty(field2.FieldsGroup))
                {
                    <div class="row col-sm-12 ">
                        <div class="form-group col-sm-6">
                            <label class="control-label">
                                @field1.GetLanguage(moduleInfoModel.LanguageInfo, moduleInfoModel.ModulesInfo.ModuleName)
                                @if (field1.Nullable == EYesNo.N.ToString())
                                {
                                    <span class="text-danger">*</span>
                                }
                            </label>
                            <WebAppCoreBlazorServer.Components.GenControl field="@field1" dataComboBoxs="@codeInfos" dataEdit="dataControl" keyEdit="@keyEdit" modName="@moduleInfoModel.ModulesInfo.ModuleName" languageInfos="@moduleInfoModel.LanguageInfo" />
                            @*@((MarkupString)(field1.GetHtmlControl(codeInfos, moduleInfoModel.LanguageInfo, "", dataControl, moduleInfoModel.ModulesInfo.ModuleName, keyEdit)))*@
                        </div>
                        <div class="form-group col-sm-6">
                            <label class="control-label">
                                @field2.GetLanguage(moduleInfoModel.LanguageInfo, moduleInfoModel.ModulesInfo.ModuleName)
                                @if (field1.Nullable == EYesNo.N.ToString())
                                {
                                    <span class="text-danger">*</span>
                                }
                            </label>
                            <WebAppCoreBlazorServer.Components.GenControl field="@field2" dataComboBoxs="@codeInfos" dataEdit="dataControl" keyEdit="@keyEdit" modName="@moduleInfoModel.ModulesInfo.ModuleName" languageInfos="@moduleInfoModel.LanguageInfo" />
                            @*@((MarkupString)(field2.GetHtmlControl(codeInfos, moduleInfoModel.LanguageInfo, "", dataControl, moduleInfoModel.ModulesInfo.ModuleName, keyEdit)))*@
                        </div>
                    </div>
                    lstFieldNotAdd.Remove(field1);
                    lstFieldNotAdd.Remove(field2);
                }
            }
        }

        <div class="col-sm-12 text-center">
            <div>
                @if (moduleFieldInfo.Count > 0)
                {

                    @*<div>@((MarkupString)("<input type='text' id='name' @bind='abcd' />"))</div>*@
                }

                @if (edit)
                {

                    <button type="submit" class="btn btn-success save" @onclick="@(() =>  Save())"><i class="fa fa-save"></i> &nbsp; Lưu</button>
                    <button type="button" class="btn call-realtime  d-none"><i class="fa fa-save"></i> &nbsp; CallRealtime</button>
                }
                @*@if (!string.IsNullOrEmpty(ModSearchId))
                    {
                        <a href="@Url.Action(" Index", "Home", new { modId = ViewBag.ModSearchId, parr = ViewBag.KeyEdit })" class="btn btn-default"><i class="fa close"></i> &nbsp; Hủy</a>
                    }*@
            </div>
        </div>

    }
</EditForm>

@if (codeInfos != null && codeInfos.Any() && codeInfos.Where(x => x.ControlType == EControlType.SCL.ToString()).Any())
{
    var scls = codeInfos.Where(x => x.ControlType == EControlType.SCL.ToString());
    foreach (var item in scls)
    {
        <input type="hidden" id="@(" calendar-schedule-" + item.Name)" value="@Newtonsoft.Json.JsonConvert.SerializeObject(item.ScheduleControls)" />
    }
    <div class="modal" tabindex="-1" role="dialog" id="modal-calendar-schedule">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="body-schedule">

                </div>
            </div>
        </div>
    </div>
}

@*@if (moduleInfo != null && moduleInfo.IsRealTime == "Y")
    {
        <script src="~/lib/signalr/dist/browser/signalr.js"></script>
        <script src="~/js/Home/realtime.js"></script>
    }*@
@*@if (moduleInfo != null && moduleInfo.ModuleID == "05H10")
    {
        <script>
            $(".save").click(function () {
                $(".call-realtime").click();
            });
            function LoadSop() {
                console.log('ff');
            }
        </script>

    }*@

@*<script src="~/plugins/schedule/schedule.js"></script>
    <script src="~/js/calendar-schedule.js"></script>
    <script src="~/js/Home/Edit.js"></script>
    <script src="~/js/CommonJs/EventControl.js"></script>*@

@code{
    [Parameter]
    public string modId { get; set; } = "02906";

    [Parameter]
    public string modSearchId { get; set; } = "";
    [Parameter]
    public string fieldNameEdit { get; set; } = "";
    [Parameter]
    public string parram { get; set; } = "";
    [Parameter]
    public string pEdit { get; set; } = "1";
    public bool edit { get; set; }
    public int success { get; set; } = 0;
    //string modId, string modSearchId, string subModId, string fieldNameEdit, string parram, bool edit = true, int success = 0
    public List<string> ErrorValidate { get; set; }
    private ModuleInfoModel moduleInfoModel { get; set; }
    //ViewBag.Title = moduleInfoModel.ModulesInfo == null ? "" : moduleInfoModel.ModulesInfo.ModuleName.GetLanguageTitle(moduleInfoModel.LanguageInfo);
    private ModuleInfo moduleInfo { get; set; }
    private List<ModuleFieldInfo> moduleFieldInfo { get; set; }
    private List<CodeInfoModel> codeInfos;
    private List<dynamic> dataControl { get; set; } //= (List<dynamic>)ViewBag.DataControl;
    private string keyEdit { get; set; }// = @ViewBag.KeyEdit;
    private EditContext editContext;
    private bool formInvalid = true;

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        formInvalid = !editContext.Validate();
        StateHasChanged();
    }
    ModuleFieldInfo moduleFieldInfoValidate = new ModuleFieldInfo();
    protected override void OnInitialized()
    {
        try
        {
            editContext = new EditContext(moduleFieldInfoValidate);
            HomeBus homeBus = new HomeBus(moduleService, iConfiguration, distributedCache);
            edit = pEdit == "1" ? true : false;
            var data = Task.Run(() => homeBus.LoadViewBagEdit(modId, modSearchId, "", fieldNameEdit, parram, true, success)).Result;
            if (data != null)
            {
                moduleInfoModel = data.ModuleInfo == null ? new ModuleInfoModel() : data.ModuleInfo;
                moduleInfo = data.ModuleInfo == null ? new ModuleInfo() : data.ModuleInfo.ModulesInfo;
            }
            else
            {
                moduleInfoModel = new ModuleInfoModel();
                moduleInfo = new ModuleInfo();
            }
            //ViewBag.Title = moduleInfoModel.ModulesInfo == null ? "" : moduleInfoModel.ModulesInfo.ModuleName.GetLanguageTitle(moduleInfoModel.LanguageInfo);
            moduleFieldInfo = moduleInfoModel.FieldsInfo.Where(x => x.FieldGroup == FLDGROUP.COMMON.ToString()).Where(x => x.HideWeb != "Y").OrderBy(x => x.Order).ToList();
            if (moduleFieldInfo == null)
                moduleFieldInfo = new List<ModuleFieldInfo>();
            codeInfos = data.DataCombobox;
            dataControl = data.DataControl;
            //Set title
            var arr = new string[1];
            arr[0] = moduleInfoModel.ModulesInfo.ModuleName.GetLanguageTitle(moduleInfoModel.LanguageInfo); ;
            Task.Run(()=> JSRuntime.InvokeVoidAsync("SetTitle", arr));
            //Hết SetTitle
            foreach (var field in moduleFieldInfo)
            {
                if (dataControl != null)
                {
                    foreach (var item in dataControl)
                    {
                        var dataRows = ((Newtonsoft.Json.Linq.JContainer)item);

                        foreach (var column in dataRows)
                        {
                            var columnName = ((Newtonsoft.Json.Linq.JProperty)column).Name;
                            if (columnName.ToUpper() == field.FieldName.ToUpper())
                            {
                                if (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value != null)
                                {
                                    field.Value += (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value).ToString().Trim() + ",";
                                }
                            }
                        }
                    }
                }
                if (field.Value != null)
                {
                    field.Value = field.Value.Trim(',');
                }
            }

            var lstSources = moduleFieldInfo.Where(x => !String.IsNullOrEmpty(x.ListSource) && x.ListSource.IndexOf("(") > 0 && x.ListSource.IndexOf("()") < 0).ToList();//Lấy các list source dạng store có truyền vào tên field
            foreach (var item in lstSources)
            {
                var sourceParr = item.ListSource.Substring(item.ListSource.IndexOf("(") + 1, item.ListSource.IndexOf(")") - item.ListSource.IndexOf("(") - 1).Split(",");
                foreach (var source in sourceParr)
                {
                    var checkItems = moduleFieldInfo.Where(x => ":" + x.FieldID.ToUpper() == source.ToUpper());
                    if (checkItems.Any())
                    {
                        item.ListSource = item.ListSource.Replace(source, checkItems.First().Value);
                    }
                }
            }

            edit = data.Edit;
            keyEdit = data.KeyEdit;
            //if (string.IsNullOrEmpty(HttpContext.Session.GetString("UserName")))
            //{
            //    return RedirectToAction("Login", "Home");
            //}
            //await LoadViewBagEdit(modId, modSearchId, subModId, fieldNameEdit, parram, edit, success);
            //codeInfos = DataCombobox;
        }
        catch (Exception e)
        {

        }
    }
    public async Task Save()
    {
        ErrorValidate = new List<string>();
        foreach (var item in moduleFieldInfo)
        {
            FluentValidation validator = new FluentValidation();

            var rsErr = validator.Validate(item);
            if (!rsErr.IsValid)
            {
                ErrorValidate.AddRange(rsErr.Errors.Select(x => x.ErrorMessage));
            }

        }
        if(ErrorValidate.Any())
        {

            return;
        }
        HomeBus homeBus = new HomeBus(moduleService, iConfiguration, distributedCache);
        //if (string.IsNullOrEmpty(HttpContext.Session.GetString("UserName")))
        //{
        //    return RedirectToAction("Login", "Home");
        //}
        //var modId = "";
        //if (model["ModId"].Any())
        //{
        //    modId = (model["ModId"]).First().ToString();
        //}

        //var subModId = "";
        //if (model["SubModId"].Any())
        //{
        //    subModId = (model["SubModId"]).First().ToString();
        //}

        //var keyEdit = "";
        //if (model["KeyEdit"].Any())
        //{
        //    keyEdit = (model["KeyEdit"]).First().ToString();
        //}
        //if (string.IsNullOrEmpty(modId))
        //{
        //    return RedirectToAction("Index", "Home");
        //}
        //var fieldNameEdit = "";
        //if (model["FieldNameEdit"].Any())
        //{
        //    fieldNameEdit = (model["FieldNameEdit"]).First().ToString();
        //}

        //var modInfo = await GetModule(modId);
        //var modSearchId = model["ModSearchId"].ToString();

        //var fieldEdits = CommonFunction.GetModuleFields(moduleInfoModel.FieldsInfo, modId, FLDGROUP.COMMON);
        //foreach (var item in fieldEdits)
        //{//Set lại giá trị null cho field
        //    item.Value = "";
        //}
        //var fieldParram = CommonFunction.GetModuleFields(moduleInfoModel.FieldsInfo, modId, FLDGROUP.PARAMETER);
        //foreach (var item in fieldParram)
        //{
        //    if (!fieldEdits.Where(x => x.FieldName.ToUpper() == item.FieldName.ToUpper()).Any())
        //    {
        //        item.Value = "";
        //        fieldEdits.Add(item);
        //    }
        //}

        string validate = "";

        //foreach (var field in fieldEdits)
        //{
        //    if (field.FieldName.ToUpper() == keyEdit.ToUpper())
        //    {
        //        continue;
        //    }
        //    if (!string.IsNullOrEmpty(keyEdit))
        //    {
        //        var keyEditObj = JsonConvert.DeserializeObject<List<ButtonParamInfo>>(keyEdit);
        //        if (keyEditObj.Where(x => x.ColumnName.ToUpper() == field.FieldName.ToUpper()).Count() > 0)
        //        {
        //            continue;
        //        }
        //    }

        //    //var checkKey = false;
        //    //foreach (var item in model.Keys)
        //    //{
        //    //    var fldArr = "";
        //    //    if (item.IndexOf("[") >= 0)
        //    //    {
        //    //        fldArr = item.Substring(0, item.IndexOf("["));
        //    //    }

        //    //    if ((item.ToUpper() == field.FieldName.ToUpper() || fldArr.ToUpper() == field.FieldName.ToUpper()) && ((field.HideWeb ?? "") != "Y" && field.FieldGroup != FLDGROUP.PARAMETER))
        //    //    {
        //    //        checkKey = true;
        //    //        if (string.IsNullOrEmpty(fldArr))
        //    //        {
        //    //            field.Value = model[item].ToString().Trim();
        //    //        }
        //    //        else
        //    //        {
        //    //            if (!string.IsNullOrEmpty(field.Value))
        //    //            {
        //    //                field.Value = field.Value.Trim(',') + ",";
        //    //            }
        //    //            field.Value += model[item].ToString().Trim() + ",";
        //    //        }
        //    //        var valid = field.ValidateFieldInfo();
        //    //        if (!string.IsNullOrEmpty(valid))
        //    //        {//Nếu validate trường dữ liệu có lỗi.
        //    //            var invalidArr = valid.ToStringArray('.');
        //    //            var fieldName = field.FieldName;
        //    //            validate += string.Join(",", invalidArr.Select(x => fieldName + " " + x));
        //    //        }
        //    //    }
        //    //}
        //    //if (!checkKey)
        //    //{
        //    //    field.Value = "";
        //    //}
        //}
        //if (!string.IsNullOrEmpty(validate))
        //{
        //    await LoadViewBagEdit(modId, modSearchId, subModId, fieldNameEdit, keyEdit, true, 0);
        //    return View("Edit", validate);

        //}
        //if (model.Files != null)
        //{
        //    var fileFields = model.Files.Select(x => x.Name).Distinct().ToList();
        //    foreach (var filefield in fileFields)
        //    {
        //        var fieldEdit = fieldEdits.Where(x => x.FieldName.ToUpper() == filefield.ToUpper());
        //        string nameFile = "";
        //        var files = model.Files.Where(x => x.Name == filefield);
        //        //foreach (var file in files)
        //        //{
        //        //    var uploads = Path.Combine(_hostingEnvironment.WebRootPath, String.Format("Uploads/{0}", modId));
        //        //    var filePath = Path.Combine(uploads, file.FileName);
        //        //    if (!Directory.Exists(uploads))
        //        //    {
        //        //        Directory.CreateDirectory(uploads);
        //        //    }
        //        //    using (var fileStream = new FileStream(filePath, FileMode.Create))
        //        //    {
        //        //        file.CopyTo(fileStream);
        //        //        nameFile += String.Format("{0}/{1},", modId, file.FileName);
        //        //    }
        //        //    if (Path.GetExtension(filePath).ToUpper() == ".PDF")
        //        //    {
        //        //        PdfHelper pdfHelper = new PdfHelper();
        //        //        string fileNameReplace = "";
        //        //        if (modId == ConstMod.ModEditPdf)
        //        //        {
        //        //            var isEdit = model["EDIT_PAGE_FILE"].ToString();
        //        //            if (isEdit.ToUpper() == "Y")
        //        //            {
        //        //                fileNameReplace = file.FileName;
        //        //                nameFile = "";
        //        //            }
        //        //        }
        //        //        // pdfHelper.ExtractJpeg(filePath, fileNameReplace);
        //        //    }
        //        //}
        //        var fieldInfo = new ModuleFieldInfo();
        //        if (fieldEdit.Any())
        //        {
        //            fieldInfo = fieldEdit.First();
        //            fieldInfo.Value = nameFile.Trim(',');
        //        }
        //    }

        //}

        //homeBus.AssignParamField(keyEdit, fieldEdits);
        var modMaintain = await homeBus.LoadMaintainModuleInfo(modId);
        var store = "";
        if (string.IsNullOrEmpty(keyEdit))
        {
            store = modMaintain.AddInsertStore;
        }
        else
        {
            store = modMaintain.EditUpdateStore;
        }
        //var excute = (await moduleService.SaveEditModule(modId, store, keyEdit, fieldEdits));
        var excute = (await moduleService.SaveEditModule(modId, store, keyEdit, moduleFieldInfo));
        if (excute.Data != "success")
        {
            var err = excute.Data.GetError();
            //var errText = await GetErrText(err);
            //var langText = await GetTextLang(errText);
            //await LoadViewBagEdit(modId, modSearchId, subModId, fieldNameEdit, keyEdit, true, 0);
            //return View("Edit", langText);
        }
        //try
        //{
        //    var note = JsonConvert.SerializeObject(fieldEdits.Select(x => string.Format("{0} = {1}", x.FieldName, x.Value)).ToList());
        //    await _logService.WriteLog(modId, (string.IsNullOrEmpty(keyEdit) ? ELogType.Insert.ToString() : ELogType.Update.ToString()), "ACTION_LOG", note.ToString(), _accessor.HttpContext.Connection.RemoteIpAddress.ToString());
        //}
        //catch (Exception e)
        //{

        //}
        //if (modId == ConstMod.ModChangeModel)//Nếu Mod là mod cần reload lại Tham số Sysvar
        //{
        //    await ReLoadSysVar();
        //}
        //if (string.IsNullOrEmpty(modSearchId))
        //{
        //    return RedirectToAction("Edit", "Home", new { modId = modId, success = 1 });
        //}
        //return RedirectToAction("Index", "Home", new { modId = modSearchId });
    }


}
@code {
    void SubmitValidForm()
    {
        Console.WriteLine("Form Submitted Successfully!");
    }
}